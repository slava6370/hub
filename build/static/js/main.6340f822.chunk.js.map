{"version":3,"sources":["components/Task/Task.js","components/FormButton/FormButton.js","components/Form/Form.js","components/ColumnButton/ColumnButton.js","components/Column/Column.js","data.js","index.js"],"names":["Task","draggableId","this","props","task","id","index","provided","ref","innerRef","draggableProps","dragHandleProps","className","content","Component","FormButton","onClick","action","document","querySelector","value","cancelClick","text","Form","handleInput","bind","textarea","setTimeout","style","cssText","scrollHeight","rows","formSettings","placeholder","onKeyDown","newColumn","width","height","viewBox","fill","xmlns","fillRule","clipRule","d","ColumnButton","handleClick","position","top","marginRight","fill-rule","clip-rule","Column","state","buttonClicked","column","setState","scrollTop","buttonText","title","droppableId","droppableProps","tasks","map","key","data","columns","taskIds","columnOrder","App","onDragEnd","addTask","addColumn","result","destination","source","start","finish","startTaskIds","Array","from","splice","newStart","finishTaskIds","newFinish","newState","newTaskIds","columnId","trim","newTaskId","Date","valueOf","concat","columnTitle","newColumnId","taskId","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6340f822.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport './Task.css'\n\nclass Task extends Component {\n    render() {\n        return (\n            <Draggable draggableId={this.props.task.id} index={this.props.index}>\n                {(provided) => (\n                    <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        className={`${this.props.className} task`}\n                    >\n                        {this.props.task.content}\n                    </div>\n                )}\n            </Draggable>\n        );\n    };\n}\n\nexport default Task;\n","import React, { Component } from 'react';\n\nimport './FormButton.css';\n\nclass FormButton extends Component {\n    render() {\n        return (\n            <button\n                className={`${this.props.className} button`}\n                onClick={() => { this.props.action(document.querySelector(`.Form-${this.props.id} .Form__textarea`).value, this.props.id); if (this.props.id === 'newColumn') this.props.cancelClick() }}\n            >\n                {this.props.text}\n            </button>\n        );\n    }\n}\n\nexport default FormButton;\n","import React, { Component } from 'react';\n\nimport FormButton from '../FormButton/FormButton';\n\nimport './Form.css'\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n        this.handleInput = this.handleInput.bind(this);\n    }\n\n    handleInput() {\n        let textarea = document.querySelector(`.Form-${this.props.id} .Form__textarea`);\n        setTimeout(() => {\n            textarea.style.cssText = 'height: auto;';\n            textarea.style.cssText = `height:${textarea.scrollHeight}px`;\n        }, 1)\n    }\n\n    render() {\n        return (\n            <div className={`Form Form-${this.props.id}`}>\n                <textarea className=\"Form__textarea\" rows={this.props.formSettings.rows} placeholder={this.props.formSettings.placeholder} onKeyDown={this.handleInput} />\n                <FormButton\n                    className=\"Form__button\"\n                    text={this.props.formSettings.text}\n                    action={this.props.formSettings.action}\n                    cancelClick={this.props.formSettings.newColumn ? this.props.cancelClick : null}\n                    id={this.props.id}\n                />\n                <div className=\"Form__cancel\" onClick={() => { this.props.cancelClick() }}>\n                    <svg width=\"15\" height=\"15\" viewBox=\"0 0 15 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M7.5 6.71875L14.2188 0L15 0.78125L8.28125 7.5L15 14.2188L14.2188 15L7.5 8.28125L0.78125 15L0 14.2188L6.71875 7.5L0 0.78125L0.78125 0L7.5 6.71875Z\" fill=\"#6B808C\" />\n                    </svg>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Form;\n","import React, { Component } from 'react';\n\nimport './ColumnButton.css';\n\nclass ColumnButton extends Component {\n    render() {\n        return (\n            <div className={`${this.props.className} columnButton`} onClick={() => { this.props.handleClick() }} >\n                <svg width=\"15\" height=\"15\" viewBox=\"0 0 15 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" style={{position:\"relative\", top:\"3px\", marginRight:\"8px\"}}>\n                    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M14.1412 6.64122H8.35878V0.858779C8.35878 0.400763 7.95802 0 7.5 0C7.04198 0 6.64122 0.400763 6.64122 0.858779V6.64122H0.858779C0.400763 6.64122 0 7.04198 0 7.5C0 7.95801 0.400763 8.35878 0.858779 8.35878H6.64122V14.1412C6.64122 14.5992 7.04198 15 7.5 15C7.95802 15 8.35878 14.5992 8.35878 14.1412V8.35878H14.1412C14.5992 8.35878 15 7.95801 15 7.5C15 7.04198 14.5992 6.64122 14.1412 6.64122Z\" fill=\"#6B808C\" />\n                </svg>\n                {this.props.text}\n            </div>\n        );\n    }\n}\n\nexport default ColumnButton;\n","import React, { Component } from 'react';\nimport { Droppable } from 'react-beautiful-dnd';\n\nimport Task from '../Task/Task';\nimport Form from '../Form/Form';\nimport ColumnButton from '../ColumnButton/ColumnButton';\n\nimport './Column.css'\n\nclass Column extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            buttonClicked: false,\n            column: props.column\n        }\n        this.handleClick = this.handleClick.bind(this);\n        this.cancelClick = this.cancelClick.bind(this);\n    }\n\n    handleClick() {\n        this.setState({\n            buttonClicked: true\n        });\n    }\n\n    cancelClick() {\n        this.setState({\n            buttonClicked: false\n        });\n    }\n\n    render() {\n        if (!this.props.formSettings.newColumn && this.state.buttonClicked) {\n            setTimeout(() => {\n                let column = document.querySelector(`.taskList-${this.props.column.id}`);\n                column.scrollTop = column.scrollHeight;\n            }, 1);\n        }\n\n        return (\n            <div className=\"column\">\n                {\n                    this.props.formSettings.newColumn ?\n                        this.state.buttonClicked ?\n                            <Form\n                                cancelClick={this.cancelClick}\n                                formSettings={this.props.formSettings}\n                                id={'newColumn'}\n                            />\n                            :\n                            <ColumnButton className=\"column__columnButton\" handleClick={this.handleClick} text={this.props.buttonText}/>\n                        :\n                        <>\n                            <h3 className=\"column__title\">{this.props.column.title}</h3>\n                            <Droppable droppableId={this.props.column.id}>\n                                {provided => (\n                                    <div\n                                        ref={provided.innerRef}\n                                        {...provided.droppableProps}\n                                        className={`column__taskList taskList taskList-${this.props.column.id}`}\n                                    >\n                                        {this.props.tasks.map((task, index) => <Task key={task.id} className=\"taskList__task\" task={task} index={index} />)}\n                                        {provided.placeholder}\n                                    </div>\n\n                                )}\n                            </Droppable>\n                            {\n                                this.state.buttonClicked ?\n                                    <Form\n                                        cancelClick={this.cancelClick}\n                                        formSettings={this.props.formSettings}\n                                        id={this.props.column.id}\n                                    /> :\n                                    <ColumnButton className=\"column__columnButton\" handleClick={this.handleClick} text={this.props.buttonText}/>\n                            }\n                        </>\n                }\n            </div>\n        );\n    }\n}\n\nexport default Column;\n","const data = {\n    tasks: {\n        \"task-1\": { id: \"task-1\", content: \"Написать НИР\" },\n        \"task-2\": { id: \"task-2\", content: \"Сделать канбан\" }\n    },\n    columns: {\n        \"column-1\": { id: \"column-1\", title: \"TODO\", taskIds: [\"task-1\"] },\n        \"column-2\": { id: \"column-2\", title: \"Done\", taskIds: [\"task-2\"] }\n    },\n    columnOrder: [\"column-1\", \"column-2\"]\n}\n\nexport default data;\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { DragDropContext } from 'react-beautiful-dnd';\n\nimport Column from './components/Column/Column';\n\nimport data from './data';\n\nimport './index.css';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = data;\n        this.onDragEnd = this.onDragEnd.bind(this);\n        this.addTask = this.addTask.bind(this);\n        this.addColumn = this.addColumn.bind(this);\n    }\n\n    onDragEnd(result) {\n        const { destination, source, draggableId } = result;\n\n        if (!destination) return;\n        if (destination.droppableId === source.droppableId && destination.index === source.index) return;\n\n        const start = this.state.columns[source.droppableId];\n        const finish = this.state.columns[destination.droppableId];\n\n        if (start === finish) {\n            const newTaskIds = Array.from(start.taskIds);\n            newTaskIds.splice(source.index, 1);\n            newTaskIds.splice(destination.index, 0, draggableId);\n\n            const newColumn = {\n                ...start,\n                taskIds: newTaskIds\n            };\n\n            const newState = {\n                ...this.state,\n                columns: {\n                    ...this.state.columns,\n                    [newColumn.id]: newColumn\n                }\n            };\n\n            this.setState(newState);\n            return;\n        }\n\n        const startTaskIds = Array.from(start.taskIds);\n        startTaskIds.splice(source.index, 1);\n        const newStart = {\n            ...start,\n            taskIds: startTaskIds\n        };\n\n        const finishTaskIds = Array.from(finish.taskIds);\n        finishTaskIds.splice(destination.index, 0, draggableId);\n        const newFinish = {\n            ...finish,\n            taskIds: finishTaskIds\n        }\n\n        const newState = {\n            ...this.state,\n            columns: {\n                ...this.state.columns,\n                [newStart.id]: newStart,\n                [newFinish.id]: newFinish\n            }\n        };\n\n        this.setState(newState);\n    }\n\n    addTask(content, columnId) {\n        let textarea = document.querySelector(`.Form-${columnId} .Form__textarea`);\n        content = content.trim();\n\n        if (content) {\n            const newTaskId = `task-${new Date().valueOf()}`;\n\n            const newColumn = {\n                ...this.state.columns[columnId],\n                taskIds: this.state.columns[columnId].taskIds.concat([newTaskId])\n            };\n\n            const newState = {\n                ...this.state,\n                columns: {\n                    ...this.state.columns,\n                    [columnId]: newColumn\n                },\n                tasks: {\n                    ...this.state.tasks,\n                    [newTaskId]: {\n                        id: newTaskId,\n                        content: content\n                    }\n                }\n            };\n\n            this.setState(newState);\n        }\n\n        textarea.value = \"\";\n    }\n\n    addColumn(columnTitle, columnId) {\n        columnTitle = columnTitle.trim();\n\n        if (columnTitle) {\n            const newColumnId = `column-${new Date().valueOf()}`\n\n            const newColumn = {\n                id: newColumnId,\n                title: columnTitle,\n                taskIds: []\n            };\n\n            const newState = {\n                ...this.state,\n                columns: {\n                    ...this.state.columns,\n                    [newColumnId]: newColumn\n                },\n                tasks: {\n                    ...this.state.tasks\n                },\n                columnOrder: this.state.columnOrder.concat([newColumnId])\n            };\n\n            this.setState(newState);\n        }\n    }\n\n    render() {\n        const columns = this.state.columnOrder.map((columnId) => {\n            const column = this.state.columns[columnId];\n            const tasks = column.taskIds.map((taskId) => {\n                return this.state.tasks[taskId];\n            });\n\n            return <Column\n                key={column.id}\n                column={column}\n                tasks={tasks}\n                buttonText={'Добавить еще одну карточку'}\n                formSettings={{\n                    newColumn: false,\n                    action: this.addTask,\n                    placeholder: 'Введите название карточки',\n                    text: 'Добавить карточку',\n                    rows: 2\n                }}\n            />\n        });\n\n        return (\n            <div className=\"app\">\n                <DragDropContext onDragEnd={this.onDragEnd} >\n                    {columns}\n                    <Column\n                        buttonText={'Добавить еще одну колонку'}\n                        formSettings={{\n                            newColumn: true,\n                            action: this.addColumn,\n                            placeholder: 'Введите название колонки',\n                            text: 'Добавить колонку',\n                            rows: 1\n                        }}\n                    />\n                </DragDropContext>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}